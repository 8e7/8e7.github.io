[{"content":"YTP 海外參訪心得 (照片待補)\n這個心得分成兩個部份，前半是灣區的企業參訪，後半則是參加 BMoE 營隊的心得。\nDay 1~5 灣區參訪 前幾天的行程參觀了一些不同的公司，也認識了許多在矽谷工作和成立新創的人。\n公司參訪 第一天中午馬上就到了 Google 的總部，和蘇多門學長見面。Google 園區分成很多棟大樓，因此我們也只看得到一小部份。午餐是在他們主要的餐廳吃，有幾種不同風格的料理（日式、印度、墨西哥、美式\u0026hellip;）可以像自助餐任選。吃午餐的時候聊到了蘇多門在美國工作的經歷，感覺到在 Google 工作的經驗和所在的小組關聯性很大，而也有可能生活都在華人的同溫層中。Google 的好處是工作環境好，薪水跟休假也不差，是一個讓人感覺很穩定的公司。\n第二天早上參觀了 Cribl 並且和那裡的員工 Sunny 見面。Cribl 是一個做 B2B 資料庫整合還有分析的公司（應該吧？），而我覺得最有趣的是，這種公司解決的需求是一般人根本不會知道的，但是他的市場價值還是能到幾億美元，所以有很多商機可能是作為消費者不太會接觸到的。另外讓我感觸很深的是，矽谷的人加入新創的動機，有些只是出於成就感，許多人把讓一家新創上市之後就會馬上再想到新的 Idea 去開下一家。參訪 Cribl 讓我發現未來的職涯有更多選擇。\n第三天早上去 Plug and Play 參觀，那是一家很有名的新創加速器（簡單來說就是投資並且栽培新創的公司），並且由那裡的其中一個 VC （Venture Capitalist, 新創投資人）向我們介紹。Plug and Play 是 Google 和 Paypal 的早期投資人，而他們的運作模式就是大量投資最早期的新創，並且期待有獨角獸（Unicorn）能夠上市或是被併購。加入他們計畫的最大優勢就是能和業界的其他人討論合作。\n第三天中午去了 Meta，原本以為是一個蠻神秘的公司，結果一進去發現裡面超像購物中心XD，一樓的餐廳看起來就像專門賣各國料理的商店，還有一間全部都是樂器的練習室，超級不像公司總部。在那裡工作的 Hawx 跟我們說，他覺得美國比較重視生活和家庭，和工時長的台灣不同，但是在 Meta 工作壓力也比在台灣大，因為他們對員工的懲罰措施也更嚴厲。\n總結來說，我從參訪這些企業後發現了企業的文化對工作品質的影響，以後在考慮去某間公司工作的時候，應該要思考內部工作的環境和風格。\n其他訪問 第一天晚上和 Gemini（與精誠合作的數據分析公司）員工 Eduardo 和 Katrina（暑假去 Gemini 實習的 Berkeley）學生吃飯，聊到了 Eduardo 去台灣留學的經驗、Gemini 的工作環境、還有 Berkeley 的大學生活。後來給他們聽了我們的 Pitch 然後也收到一些寶貴的建議。\n第二天中午和來自中國，現在在灣區工作的 Jonathan Wu 吃飯。他講了近年來在中國的新創環境變化，也鼓勵我們把握機會大膽去國外嘗試。\n第二天晚上跟之前開過新創的 Ted 吃飯，他講到在娛樂/媒體產業會面對到的困難（包含資金和人才上）並且也講到如何說服一個可能不了解你的產品背後市場的投資人。他給了我們一些做遊戲相關內容的建議和經驗分享，讓我特別印象深刻。\n第五天早餐和 \u0026ldquo;IC\u0026rdquo; 詹益鑑見面，他用一個宏觀的角度探討台灣跟矽谷的新創生態差異，包括市場、政策、投資人心理等等。他認為可以儘早試著加入不同規模的新創公司以吸收經驗，之後再自己開一個新創的成功率較高。\n整體而言，我發現大家對生涯規劃的建議和如何接觸新創的想法都不盡相同，也反應著他們的個人經驗，畢竟創業沒有一條絕對正確的道路。但是所有人說的話的共通點就是「勇敢嘗試」。只要繼續嘗試而尋找新的機會，成功就會有可能。\n旅遊行程 Computer History Museum - 去那邊的時候因為時差的關係超級累，而且時間不多就只去看了一個現場 Demo。那個 Demo 是使用一台 1960 年開始生產的超大型 IBM 電腦，據說那台已經用了 60 幾年了超厲害。而且還看到了用實體 Punch Card 打出來的「程式」，我覺得超有趣的 \u0026gt;\u0026lt;\nStanford - 校園有夠大，有一種很悠閒的感覺，然後印象最深刻的就是看到一群學生 (?) 換上泳衣在噴水池裡玩水，算是 Culture Shock 吧 XDD，然後他的紀念品店根本是把 Stanford 變成服飾品牌了，十分壯觀\nRedwood City - 第三天看完 Meta 之後就是自由時間，我們決定搭火車慢慢往飯店方向逛，中間就經過了一個叫 Redwood City 的小城。因為我喜歡音樂有關的東西，就去了一家吉他店找 CD，然後在那裡遇到了去過台灣表演的店長，超級酷。後來還去了 Whole Foods 買食物煮當天的晚餐。然後 Caltrain 上面沒什麼規定（就算有也沒人在管），所以可能會遇到一些很可怕的乘客www\n漁人碼頭 - 整趟旅行中看起來最像給觀光客去的地方，有蠻多特色商店的很好逛，然後看海獅也非常有趣\n金門公園 - 那個時候在舉行 Outside Lands (舊金山年度的音樂祭) 所以人很多，我們就算是避開那區。後來逛了植物園，但是感覺維護的沒有很好。\nOracle Park（巨人隊棒球場）- 很壯觀，我們坐在最高那層的幾乎最後一排，但是場上的球員都看得很清楚，然後那一局也很精彩，之後要去的人大推。\n飯店 - 第一間飯店住得超讚。房間裡有一個完整的廚房，有兩個電磁爐、微波爐、菜刀、洗碗機之類的，我們第三天就去超市自己買東西吃，蠻好玩的。然後早餐也很好吃，而且有一個廣東的阿姨人超好。\nDay 6-11 BMoE 營隊 接下來的五天 (8/14 ~ 8/18) 就是 Berkeley Method of Entrepreneurship Bootcamp（BMoE），簡單來說是一個介紹創業的營隊，除了有許多創業家和 VC 的講座，整個營隊的主軸則是要分組做一個創業的想法並且 Pitch 給投資人。\n開場 Pitch 和組隊環節 第一天走進講堂的時候，我就感覺到了氣氛的不同。這是一個需要快速與其他人認識並建立關係的營隊，因此我一開場就找到前面靠走道只剩一個的位置坐下，聽著旁邊兩個人的對話。旁邊的人叫做 Alfredo，是 Berkeley 商學院（又稱 HaaS）的大學生，他的 Pitch 是一個關於全息影像 (Hologram) 的東西，但是他比較缺乏技術上的背景知識。\n接下來進入了介紹環節。其中有一個講者叫 Buddy，教了我們演講的技巧，還說最好的練習是要用不同的語調念 ABC。所以他找了幾個自願者念自己語言的字母，有英文、西班牙文、俄文\u0026hellip; 然後我就上去念了注音 XDD 結果還少念一堆，變成全場焦點 (?)\n後來就是 Pitch 時間了。Pitch 的規則是限時一分鐘，在這一分鐘內要把創業的動機和想法解釋清楚，還要招引別人和你組隊。我介紹的是一個能幫你學跳舞的 AI 輔助工具，而講的時候因為有背稿，所以也大致上順利的在時間內完成。我猜這個題目因為比較親民（其他有許多組做的東西都很偉大），所以引起蠻多人的興趣，下課之後也有不少人對我的 Pitch 有印象。原本以為組隊有料的，結果\u0026hellip;\n進入到下午的組隊環節，每一個想要組成隊伍的人都會寫一張簡單的海報，然後就有一個小時的時間讓大家自己去各個「攤位」找隊友。這個時間非常的混亂，而我第一次參加這種活動，就沒有發現在找人策略的重要。在這種場合，說服別人加入自己除了要宣傳自己的專案，更要說服別人「你現在有一個好的團隊」，所以一開始找到確定加入的人特別重要。我當時讓大家去其他攤位考慮太久了，以至於大家最後覺得跟我會組不起來就去找別人了。而我也是到很後面才放棄組隊的 qwq，所以最後在找隊伍的時候選擇就變得很少。我看了一下原本記下來的隊伍，最後決定找之前聊過的同學加入他的隊伍 Lighthouse。\n組隊之後\u0026hellip;問題發想 我們的隊員有：Lois（組長），Sachita，Linshen, Layla, 我, 和 Henry (北科大教授)。其中 Linshen 跟 Layla 都是中國人，然後 Henry 算是在旁邊給我們建議的，所以其實有時候會講到中文，但是大部分時間我都還是試著用英文溝通。\n第一天晚上我們去吃了 Berkeley 的一間 Pizza 店，聊了一下各自國家的事情（還有宣傳台灣食物），結果我才發現原來我們這組還沒有一個確切的產品！唯一知道的就是想要以天災作為題目的出發點\u0026hellip; 所以我們就花了一些時間思考不同的天災，最後決定聚焦在颱風和淹水等水災上。\n到了第二天，當許多組別已經開始思考商業模型和報告呈現方式時，我們仍然沒有確定到底要做哪一種東西。當天晚上的時候是小組和 Mentor 討論，這時我們也很明顯的發現：每個 Mentor 給的建議會根據他們的背景有很大的差異。有些人比較在乎技術細節和可行性，有些人重視商業模型，有些人在乎的是市場大小和行銷策略等。\n此時我們對目前的產品有一些不同的想法，而為了找到真正有用的想法，我們需要從使用者的角度來了解他們的需求。因此我就詢問了其他組的同學，問他們覺得遇到淹水或是颱風時對一般人造成最大的困擾是什麼。而我問的四個人也給出了四個不同的答案。經過這些討論，我們也對問題的核心有更深入的了解。\n到了第三天早上，當時我們希望做的東西是一個能檢測住家的結構完整性的工具。不過我們還沒確定技術細節和工具的形式（是一個 APP 還是一個要買的東西 etc.），但是接下來就要做 Elevator Pitch 的練習了，所以我們暫時決定了一個方案。\nElevator Pitch Elevator Pitch 的意思是：當你在電梯裡遇到了可能的投資人，要利用這段極短的時間快速讓對方對你的方案產生興趣，並且要到之後開會的機會。營隊中有個活動就是模擬這個情形，之前的兩位 Mentor 會在一個小桌前聊天，然後我們要快速的加入話題並且開始介紹。我們組的 Elevator Pitch 是由我和 Sachita 進行，而我們的策略是用最近天災的新聞（夏威夷大火）帶入主題，並且用一些數據說明市場大小。這種練習跟一般的演講不一樣，因為聽者會自行插話並且將話題帶到別的方向，像是我們組的 Mentor 聽完介紹之後就想知道更多技術細節，講著講著時間快要結束了，此時我們就說了一句「技術細節之後能開會的話再說，請問什麼時間方便呢？」之後時間剛好結束，我們勉強的通過這一關。\n最後報告 我們最後的分工是：Lois 負責開頭的故事和結尾的總結，Sachita 介紹市場大小相關的數據和產品的軟體部份，Linshen 釐清了很多技術細節，Layla 負責簡報設計，而我做的是商業模型的獲利的財務估計（跟資訊領域完全沒關係xd）。報告時間只有五分鐘，所以所有的資訊都要非常精簡並且清楚講出。在準備報告的時候，Mentor 也幫助我們整理簡報的脈絡和故事的流暢度（Shoutout to Lucas!）。\n因為ㄧ試著講為好幾遍的關係，最後的報告其實十分順暢，我也講出了我好幾年來最流利的英文。就這方面來說 Pitch 其實就是一個很重要的演講，必須要展現出自信，讓別人認為你和你的團隊是可靠的。\n可惜的，我們並沒有在我們的 Track 裡面得獎，但是其他有得獎的組別在營隊開始之前都已經做了非常多的努力，而我們只是幾個大學生，所以輸得合情合理 (?) 但是我們都還是對最後的報告感到非常的驕傲。\n整體心得 \u0026amp; 感謝 整體而言，我覺得參加這個活動讓我開始反思原本對職涯選擇的想像。資訊系畢業的學生不一定要做軟體工程師，軟體工程師也分成非常多種，在大學的時候也可以參加不同的課程、研究、實習來盡量探索各個領域。矽谷的所有人都展現出了「勇於嘗試」的態度，因為所有的經歷都是一個學習的過程，不論最後是成功或失敗。營隊中有一位講者 Sriharsha 是一個大學剛畢業的學生，他在高中的時候為了練習寫 Java 就寫了一個計算 GPA 的小程式，給同學試用的反應很好，而他也就越做越大，最後寫出一個上萬學生使用的課程規劃平台。上了大學之後，他也誤打誤撞的加入了一些實驗室，而他現在創業的工作也和之前是不一樣的挑戰。聽到這樣的故事也啟發我去嘗試新事物，變得更願意跨出第一步。\n以創業的部份而言，這個營隊和前期的灣區參訪在各個層面上展示了創業的過程，從最初的種子時期到不同的募資階段在規模和產品定位的改變等等，透過創辦人、初期員工、加速器、投資人、公司倒掉的人等等聽到了不同的觀點和視角。聽完這些故事讓我發現，那些大公司和成功的企業並沒有想像中的遙不可及，也有很多公司當初所解決的問題和現在主要的產品完全不一樣。我覺得經過這段時間，在這方面最大的成長是對於「發現問題」的覺察力有所進步，平常做某些工作或是生活中遇到一些麻煩的地方時，我更有辦法和意願去發現這個問題，進而找到有效率的方法解決。另外，我也更能注意到其他人對於某個產品或專題的期待，進而在發表時更能打動聽者。\n除此之外，認識營隊裡的同學和講師也給了我來自不同文化的人講話的寶貴機會。在美國體驗當地的文化，也看到了來自不同社會背景的人，對於培養世界觀是一個很好的機會。我也深刻的體會到在營隊裡要有收穫，一定要主動的跟別人聊天。\n想要感謝的人太多了，有一部分可以看 這篇 LinkedIn 貼文。我想要先感謝我的隊友（尤其是組長 Lois!），讓我在 Berkeley 五天的時間過得非常快樂。許多創業家都說創業中最重要的是團隊，而我可以肯定的說我和團隊的成員相處得很融洽。我也要特別感謝助教 Anderson 在營隊中每天特別關心台灣的團隊，最後一天還載我們去逛金門大橋真的超 nice。\n最後當然要感謝我們的領隊 Alice，在十一天的活動期間替我們處理叫車和住宿，聯絡在當地的創業家和工程師，規劃充實的行程\u0026hellip;辛苦了！還有贊助我們參加這趟海外參訪的精誠資訊和 YTP 的活動。當初在參加第三階段時，我以為海外參訪只是一個旅遊機會，而參加之後才發現它對我的國際視野和面對未來的態度都產生了相當大的轉變。希望參加 YTP 活動的大家可以不要忽視參加第三階段的機會，也希望之後去美國的同學一樣能收穫滿滿，有更好的表現！\n","permalink":"http://8e7.github.io/courses/bmoe/","title":"YTP 海外參訪心得"},{"content":"學期：111年第一學期 (Fall 2022)\n前言 拖稿拖太久了qwq\n看到一堆同學都有寫修課心得，所以想說也來寫寫看好了。這個修課心得可能比較像是學期回顧 (?)，主要目的是讓我整理這個學期各個課程的 Loading 狀況，再去看看下學期要如何做調整。喔對，還有想要用用看新架起來的部落格。\n這篇修課心得可能對還沒修過課的人沒有太大的幫助，因為內容主要會是我個人修課的狀況，不會太詳細的介紹課程內容。如果想要更清楚知道上課內容和方式等，可以參考以下幾位同學的心得。\n台大資工大一上修課心得 - YunxiuRZ 111-1 大一上修課心得 :: f0rvxdd\u0026rsquo;s place 111學年度第一學期修課回顧 :: Achi_kyw的札記 修課清單： 課程名稱 學分數 授課教師 分類 計算機程式設計 3 劉邦鋒 系訂必修 微積分 (1)(2) 2+2=4 蔡雅如 系訂必修 普通物理學甲上 3 胡德邦 系訂必修 演算法設計與分析 3 陳縕儂、蕭旭君 系訂必修 (大二) 計算機概論 3 徐宏民 系訂選修 大學國文：文學鑑賞與寫作（一） 3 潘少瑜 校定必修 程式結構與設計 3 鄭卜壬 系訂選修 健康體適能 1 莊國禎 校定必修 總學分數：23 GPA: 4.22\n正文 計算機程式設計（真強者視角） 這是資工系學生進入大學之後第一堂和資訊有直接關聯的必修課。而這堂課的設計就是要對剛接觸程式設計的學生有挑戰性。給分是 100% 的考試，內容是基礎的 C 語法和一點點的資料結構（具體來講就是由片語學習 C 語言那本書的東西）。\n對於高中有競賽經歷的人，可以在學期開始前寫信給教授當「真強者」，真強者的工作是要在每次考試前和教授、助教開會討論題目，並且把考試題目寫過一遍確認題目沒有問題。因此只要真強者按時開會（其實不開會好像也沒事）跟寫完題目就會 A+ 。\n個人認為，這堂課對於沒寫過程式的新手來講實在很難通過，今年的題目似乎特別困難，有很多大實作（code 很長）或是跨到 DSA 範圍的東西，所以停修+被當的比例特別高。事實上，如果去考試的話，我也不一定有把握能A+，所以如果你是程式初學者的大一新生的話，建議 直接退選 從暑假開始預習。\n前面提到的「跟教授、助教開會討論題目」其實比較像是聽教授講題目給助教聽，並且把總共 6 題依照難度分成單、雙兩班。有一些題目實在是有點刁鑽，我在驗題的時候都不一定有在三小時內寫完。但是出的這麼困難，讓停修比例這麼高的結果是很多人都沒有好好的把後面的內容看完，可能就會導致之後 DSA 跟 ADA 的時候更吃虧一點。建議停修/被當的人不要放棄(?)，畢竟打好基礎是最重要的。\nLoading: 協助 5 次考試的出題，每次討論 ~1 小時 + 寫 1~3 小時 微積分 (1)(2) 蔡雅如的微積分給分方式是 30% 作業 (Webwork + 手寫 + 三張學習單)，20% 小考（兩次各 10%），和 50%期考，微一跟微二是分開給分的。\n跟其他班不同的是手寫作業特別多題 (每週大概 8~12 題)，不過講課也算是講的很清楚的。課程簡報和上課的計算都會給影片跟簡報，所以學習資源算是蠻完整的。雖然我沒什麼聽老師現場的講課（就算現場有去也都在寫作業），但是老師的簡報對準備考試的幫助很大，就算是已經學過的人，看一下裡面的例題確定自己都會做也很有用。\n週一下午還有一個小時的助教課，主要會補充一些課外內容以及幫助同學完成學習單。我的助教講解的蠻清楚的，但是有時候語速有點快（或是我那時候很想睡），而且感覺不太清楚我們上課的進度到哪裡。\n兩次小考都是在助教課進行的，感覺第一次的都特別難（或是我低估難度/計算不熟之類的），導致我考完第一次小考之後都變成 A+ 快沒救了，然後就會超級認真念，最後驚險的補救回來。希望下學期不要再有這麼可怕的狀況了（但還是要 A+啊）。\n喔對，期末考前寫考古題超級有用，大推。\n因為高中的時候預習過一部分內容，所以目前沒有覺得微積分特別吃力，但是下學期的東西我現在完全不會，所以下學期想必會花更多時間。\nLoading: 每週作業 3~5 小時 + 考前複習約 10 小時 收穫: 還行吧，至少我覺得考試內容的東西我都還算熟悉。 普通物理學甲上 大甜課，相信德邦絕對沒錯。\n其實我覺得認真聽課的話是可以好好學到物理的，老師講課會一步步的慢慢帶公式，也會問（所剩不多）的現場同學有沒有跟上，下課後去問問題也會很耐心的回答。\n期中考取消讓整堂課的 Loading 變輕許多，但是期中以前的東西我可能忘掉一堆了。\n經過一個學期，我終於覺得有一點懂電磁學在幹嘛了，希望下學期也能弄懂量子物理。\nLoading: 作業每次2~4小時，總共七次（後面幾週就沒有了），加上上課每週四小時，有上課的話不用花太多課外時間複習。\n演算法設計與分析 (ADA) 大二必修，介紹常見的演算法，和競賽程式的關聯性不小。 因為作業和考試都是由助教負責，所以題目品質跟難度控制的就蠻剛好的，對競賽選手來說要拿 A+ 蠻簡單的，但是考試前還是要花一些時間看清楚簡報的東西。整體來說，這堂課對我最大的幫助應該是透過手寫作業提升寫證明和描述演算法的能力，在寫一些講義的時候有明顯的進步。\n因為我都沒有上課，所以其實不知道聽課有沒有幫助，但是對已經學過的人來說看看簡報跟問一下同學就夠了。期考前寫考古題也蠻有用的。\n這堂課的助教們都非常的負責任，也很願意跟學生溝通，希望作業能改快一點就是了。\n最近發現我對後面介紹 NP 問題和估計演算法的部份蠻感興趣的，目前正在考慮下學期修電機所的高等演算法。\nLoading: 四次作業各 10~15 小時 (不含加分題的部份)，加分題可能在每次作業讓我多了 5~10 小時之類的。Mini 作業每週大約半小時，準備期考約 5 小時\n計算機概論 這堂課前半是先講電腦背後的基本結構，後半則是介紹一些資工系需要會的東西 (Python, Git, 網路簡介, OS 簡介, SQL) 。老師會把上課簡報放在 COOL 上，但是不會有上課的錄影。簡報有一些地方會有點不清楚，有時候需要自己猜這個部份的意思是什麼，但是只看簡報也足夠準備期考。老師的講課速度有點慢，有時候會花蠻多時間講題外話/閒聊的，而且 101 教室有點太好睡了，所以期中之後就很少去上課。\n期末考因為範圍很大 (後半的那些東西)，很多人都沒有辦法唸完，所以那個時候我也準備的比較辛苦。我覺得這堂課的知識性內容還算實用，但是比較技術性的東西 (Python 用法， SQL 語法) 感覺在這邊就先講的效果不是很好。\nLoading: 作業八次，每次約 2~3 小時（除了 Python + Git 那次大概 10 小時），期中幾乎沒念但是有上課，期末沒什麼上課但是唸了 7~8 小時。\n大學國文：文學鑑賞與寫作（一） 扎實，Loading 普通，甜度普通\n在選國文的時候因為不想碰古文，看到在講晚清小說的課，感覺蠻有趣的就填了。\n這堂課的給分是 10% 出席，15% 平常作業 （小作業+2000字探索書寫+NTU Cool 討論），2000字讀書報告 20%，期中考 30%，期末報告 15%。作業的給分還算蠻甜的（正常寫的話最低 B+，我的探索書寫跟報告都有拿到 A），不過期中考就稍微困難一點。\n上課方式是每週先預習完指定的文本，上課時老師再帶過那段文本的重點和補充時代背景等，最後會分組進行問題討論。講課內容和閱讀的文本都還蠻有趣的，而且真的可以學到如何分析一個文學作品，並且了解到清末民初的社會和文化如何產生變革。如果對那個時代的歷史/文學有興趣的人應該會蠻喜歡這堂課的。\n我覺得稍微可惜的就是分組的方式。因為上課的分組是老師某一天隨機分好的，然後同一組會維持一整個學期，所以每一組的實力可能就會產生一些差距。我們這組因為有人中途停修，變成只有四個人，但是其他組有六個人，還好其他幾個組員都蠻可靠的。\n期中考形式是考上課的文本相關的申論題共五題，比較特別的是他不是 Open Book，所以一定要對之前的文本有印象。題目本身沒有到特別刁鑽，但是對第一次考申論題的人來說有點困難。老師的給分也會比較嚴格，我自己是拿到 69 分，據說是中位數。\nLoading: 指定閱讀 2.5~3 小時（只有期中考前有讀）、上課 3 小時。上面三個大作業（探索書寫，讀書報告跟期末報告）大概都是 10 到 15 小時（我的作文寫非常慢）。\n程式結構與設計 (ICPC 培訓班) 上大學之後就決定先繼續比一年的 ICPC 。多虧有可靠的隊友，讓我在今年的培訓班過得順利又有成就感。\n今年修培訓班最大的收穫就是習慣團隊合作的模式和慢慢有辦法面對困難的問題。每次把那份難到誇張的作業題單寫完的時候真的會很有成就感XD。\nLoading: 作業每次 10~15 小時（總共六次，學期中只有四次），每週團練 5 小時，加上一些比賽等等，平均一週可能 10 小時，但是 12 月初就結束了。\n健康體適能 聽說其他系有很多人不滿意這堂課的給分方式，但是我自己覺得還好（雖然我是其中一個 A+）。體適能是他上課的時候唯一會考的東西，所以把那個當作給分依據也蠻合理的，至於女生普遍分數比較高就是另一個問題了，這個部份我也不太清楚。\n結語 感覺這學期在課程方面沒有什麼選擇權，比較多是看其他人和之前學長選了什麼課就跟著選，然後就變 23 學分了。\n整體而言我覺得這個學期過得有點太忙，想要留一點空白的時間去探索正課以外的事情。至於 GPA 的部份希望也可以維持上學期的表現，但是不需要為了 GPA 犧牲一些更重要的事。\n最後祝福大家新年快樂！\n","permalink":"http://8e7.github.io/courses/fall2022/","title":"台大資工大一上 修課心得"},{"content":"TOI 2022 心得文 拖稿快三個禮拜 終於寫完了\u0026hellip;\n第三年進選訓了，當初的興奮少了一些，倒是目標更加明確了。\n選訓前 去年四模考完的時候，我只有一個想法：我真的累了。過去一個多月以來，一直在國手線下一點點的壓力持續的累積，寫題目的時候都變得提心吊膽，深怕自己實力無法發揮。選訓結束的時候，我在國手線下不到一個子題的距離，但是我也自認當時我已經無法追上。只是下定決心要繼續拼國手，而明年一定要沒有後悔的比完TOI。 雖然有了二階推薦很高興，卻也一時不知道接下來一年的時間該怎麼過，當時又因為停課就獨自在家裡刷題，效率也差到不行。暑假的時候原本計畫要每週打一場OI，結果只有七月這樣做，八月幾乎都在耍廢。我在那時候開始把「為了樂趣寫題」跟「為比賽刷題」，在兩者之間取得平衡。九月開學之後，練習的動力又回來了，於是到年底之前，我一邊做校隊培訓的東西，一邊刷CSA/Atcoder/Cses，重新打好基本功。 一月之後我發現自己對OI有點生疏了，連續幾場都打的不理想。那一陣子我突然開始有耳鳴，而且越來越頻繁，想要繼續練習，但身體卻不讓我這麼做。那大概是我這一年以來最低潮的時候吧，英文可能叫做burnout（中文好像沒有合適的翻譯）。後來過年的時候我就強迫自己休息，慢慢地找回寫題的樂趣，再加上後來開始運動了（從高二以後很少去跑步，退步超多），身體狀況開始好轉，OI checklist題數也慢慢累積起來了。到了進選訓的時候，我沒有多想什麼，就是憑自信去面對比賽就好。\n選訓中 我今年選訓的策略是要維持住平常想題、實作、心態跟體力。選訓營即使不是考試期間，也都是在考驗選手各方面的實力。\n練習跟耍廢的平衡： 模考前要多練習保持手感還是放鬆耍廢的問題，每個人的答案似乎都不太一樣。對我來說，選訓裡的寫題是為了維持自己手感和想題的靈活度，所以我每天會給自己一個目標/計畫，通常是寫出一兩個題目，然後在一整天的時間內慢慢完成它。寫不完的話自然也有一點壓力（尤其是劉澈跟balbit 刷題速度有夠快），但是後來也稍微習慣了，有時候放掉一題也是可以的，只要自己可以接受就好。\n維持心態 一模到二模的那個禮拜，我並沒有特別緊張，因為我相信我只是因為策略不好掉分數而已，接下來只要發揮原本的實力就可以逆轉。不過心態這種東西真的蠻微妙的，我覺得心態說到底也只是「是否能在賽中維持冷靜」這件事吧，能夠影響心態的事情太多，我到四模的時候也是照樣心態炸掉，似乎也沒有比別人好到哪裡去呢。大概要說我有做到的事情就是沒有放棄吧，始終到最後一刻，即使認為自己已經沒救了但仍然掙扎，這是我從一開始打競程就有的態度，希望到IOI的時候也能用這樣的氣勢面對。\n模考經過 一模 看完四題之後原始的精神分數大概是230吧，因為C很裸就決定先寫再說，沒想到寫完一直出bug，在最小的測資上面也MLE(應該是segfault)。到大概11點的時候跑去想pA但沒有想很清楚，後來掙扎了很久之後把指標型trie改成陣列型就過了，此時已經11:30了，整個節奏被往後拖很多。之後寫完pA然後傳上去TLE，但好像也沒救。後來只能用一點點方法亂優化，加完Ofast之後傳上去終於在12:30過了。這時候我回去想pD，突然推到了滿分解就把他寫掉了。 這時候比賽還有一小時，我大概想到了B的滿分解，突然發現自己有機會破台，莫名的開始緊張，決定拼一把之後開寫。寫了一份很醜的解之後，卡在範測過不了。到了剩下二十分鐘的時候我就放棄去拿$O(n^2)$了，但是最後也拿不到\u0026hellip; 後來補題的時候發現我根本少考慮一個case，完全沒機會拿到那個分數。於是我就拿了一個很奇特的300分，排名第6，線下42分。\n二模 一模之後我低國手線六十幾分（一階分數），但這似乎是比賽策略的問題。我突然發現我在準備的是OI而不是TOI，那時候有跟ZCK討論了一下，決定我比賽節奏跟時間分配要再往前一點，二模的時候，我就很乾脆的把能拿的分數都先拿到。於是我開場就馬上先寫pD，但是要上傳的時候，和一模相同的惡夢又發生了，明明是很短的扣的卻一直WA。正當我在猶豫要不要放掉之後，突然發了之後會rejudge的公告。果然師大比賽正常發揮了嗎，後來就跑去拿B的部份分了。至於A跟C的話我都花了一些時間想，但是都沒想法。最後被延長的快四十分鐘的時候，我其實應該好好想A或C的作法了，說不定就可以想到其中一個。分數225.7分，rk6, 線下22分。\n三模 不知道為什麼，當天比賽的時候就有一種要趁這場比賽追回來的預感(?)開場看到兩題不是batch的東西的時候真的怕爆，想說一定要把握A跟D。看到D是水題寫掉之後，我就開始認真的想pA，畢竟滿分解跟部分分差了76分($n \\leq 80000$不知道在幹嘛)，後來有了一個神奇的二的冪次分層作法，複雜度是$O(n\\log n)$，但是直接寫會有25倍的常數O_O，我一時想不到其他比較好寫的東西，就在11:00的時候開寫了。原本的版本11:30就寫完了，但是果然被卡常卡死，之後我也不知道哪來的自信，拼命的壓常，終於在快要13:00的時候AC，最後在沒什麼思考時間之下跑去拿BC的分數。總分270, rk3, 線上24分。\n四模 這是我打最慘的一場，但某種程度也是我最幸運的一場。開場之後看到D是最可做的，很快想到了$O(nC\\log n)$的作法，但是想著根本壓不過就一直不敢去寫。實際上這裡的實做細節不簡單，我在賽中其實沒有想清楚，如果他沒有卡常到只有balbit過得話我說不定就下去了。寫到11:00之後發現我不會實做之後我就慌了。原本是想要照著三模的方式打，但是到了這邊已經沒有時間了。我突然想到了C的作法，就急著直接開寫下去，傳上去拿了24分，滿分的子題竟然是WA而不是TLE？！我找了很久跟$n$的大小有關的bug但是一直沒有結果，直到比賽快結束的時候才發現我假解了，根本不該過$O(n^2)$的測資（還好少這個subtask不會讓我到線下）。快結束的時候，我開始接受自己當不上國手，思考著之後要如何面對競程，最後在什麼都做不到的無力感之下結束高中了選訓。 最後拿了47分，rk3, 線上（第四名開始算）1.9分。\n比完四模之後我跑到教室裡面趴下，跟2020全國賽的那天一樣不想跟任何人說話。十二個人裡面只有我看起來明顯那麼失落。但我不是因為當不了國手難過，單純只是我對自己的表現很不滿意。後來聽到我在線上之後心情更複雜了，我努力了那麼久，最後換來的卻是如此不光彩的勝利。這不是我想要的，我必須變得更強，一定不能留下任何後悔\u0026hellip;\n愚人節比賽 今年選訓比較特別的事情就是和FHVirus跟Wiwiho一起出了一場愚人節比賽。去年我就和FHVirus提出這個想法，我們在上學期的時候遇到一堆怪梗都把他紀錄起來，題目就慢慢越出越多了xd。真的很希望大家喜歡我們的題目，因為過程中大概reject了超過十題www。感謝fhvirus擔任整人的黑臉，也感謝wiwi花了那麼多時間出一個超級酷的碰撞機器人。\n體育課 今年的體育課我覺得比去年好蠻多的(?)，因為是同一個老師帶，他也比較知道選訓營的人是多麼的不會運動的能力跟需求。可惜這次球場都在整修就不能打球了qq(至少去年的慘案沒有重演)。 不過我今年有更規律的運動了，除了跑步之外還有扯鈴(?)。Wiwi跟鄭允臻不知道為什麼都帶了扯鈴，害我手癢一直去玩xd\n食物 比較懂得挑捷絲旅的早餐了，印象最深刻的是他們的熱湯跟優格超讚，大推 自助餐似乎有逐年變糟的趨勢，我真的印象中高一的時候它其實還不錯吃qwq 西餐廳今年換了，從不能吃變成能吃但是有點貴，然後據說他加的鹽的量是隨機的xd 早餐店還是讚，但是宮保麵有一兩次加超多辣椒，然後千萬不要吃小肉豆\u0026hellip;\n耍油\u0026amp;其他娛樂 今年看了蠻多動漫的，還去了兩次安利美特。我兩次各買了一本日文漫畫，當作是在學日文去看的，結果就是看超慢然後一直查字典。二階看的辣妹與恐龍還有派對咖孔明超好笑，然後當然還有Spy x Family跟輝夜姬。我在晚上的時候在房間播藍色時期，那是一個跟畫畫有關的動漫，但其實敘述的東西跟打競程超像。 今年還流行一堆文字遊戲，從各種怪怪的dle開始，到一個叫cryptogram的酷app，到scrabble跟填字遊戲，反正很多元就是了www 然後balbit超強\n朋友們 這一段就有點不好意思了xd。大概從去年選訓開始，我才真正跟其他同屆的人比較熟一點。在這之前，我只是一個喜歡寫程式的普通高中生，所以我每次比賽的時候都有一種自己是圈外人的感覺，所以到現在慢慢有人主動願意認識我，真的讓我蠻開心的\u0026gt;\u0026lt;。這一年以來，除了比賽之外也跟你們有了各種難忘的快樂的回憶，我一定會好好珍惜的。謝謝你們在這段時間陪我練習，跟我說話，也真心祝福你們未來一切順利（怎麼有一種離別的感覺，明明大學還會看到啊www）。\n喔對，還有上課 蔡孟宗教授的課好酷，有些主題聽了三遍之後終於稍微懂了www。\n未來 其實，這一年準備IOI對我來說是沒有什麼外在壓力的，但正因為這樣我反而更認真的看待它，似乎是要證明自己努力的價值吧，並且用這一年的時間在各方面有更多成長。接下來的三個月就是最後衝刺了，我也要用這剩下的時間，盡我最大的能力爭取金牌！\n最後放之前拍的這張圖，祝今年台灣IOI 4金!\n","permalink":"http://8e7.github.io/cp/contests/toi2022/","title":"TOI 2022 心得文"},{"content":"前言 請了將近兩個月的公假，終於到了正式比賽的這天。這段期間大部分都在費曼跟FHVirus, Yungyao寫題vir比賽。我一直在想辦法找到不同練習方式之間的平衡。一方面覺得自己實作能力有點危險，又發現想法根本贏不了別人，有時候遇到基礎演算法的熟悉程度也不夠等等，所以我換了好幾種地方練題，希望能在各方面都補的強一點。\n全國模擬賽的時候我又燒雞了，狀況甚至跟去年全國賽差不多，只是我花了更多時間想F然後真的沒想到。我再度認清自己在比賽後半的實力會大幅下降，短期之內難以改善，只能調整寫題的節奏。\n賽前一週的狀況就好了一些，打了一些AGC練想法，然後寫一點酷酷的難題，之前沒有準備的東西就算了，帶著喜歡寫程式的心情進考場似乎更重要。\n比賽過程 打完vimrc之後開始看題。我以為題目會照難度排序，所以一開始的策略是一次先看三題然後把他們秒掉。A跟B很快就會了，但是C好像是怪怪圖論題欸，不管了先寫再說。\n0:13 pA AC\npB就是點到直線距離公式，不會卡精度吧(?)，等等怎麼範測WA了，這時才發現他是線段而不是直線。我沒有特別想分case處理，因為急著AC所以就用最快想到的三分搜去砸。\n0:28 pB WA 等等怎麼WA了，是被卡精度嗎\u0026hellip;?看了幾分鐘後我發現我分點公式打錯字了;-; 好蠢。 0:36 pB AC\nC還是沒想法，先看DE好了，D我想了一下就想到二分搜+拓撲排序，E是奇怪資結。那先把D寫掉好了，理論上15分鐘內寫得完?\n0:54 pD MLE+WA 奇怪了，我到底哪個地方會MLE，兩個while迴圈應該都是好的啊\u0026hellip;?後來把二分搜改成O(C)也有分數，到底錯在哪\u0026hellip;? 結果我呼叫函式的時候把點數(N)傳成邊權了，直接浪費半個小時。 1:25 pD AC 這時候我就有點緊張了，前三題(理論上最簡單)的題目我花了一個半小時，pC還不會找正環，想剩下題目的時間大幅減少。於是我決定先看完所有題目再說。\n沒想到後面的題目竟然比CEF簡單。pG是裸的樹壓平+BIT，pH感覺可以觀察，pI是矩陣快速冪。先想了一下 I，感覺算直排的狀態好像有點麻煩，來看看有沒有$f(L)$的遞迴式好了。然後我求出了一個$O(n^2)$的遞迴式: $f(n) = \\sum_{x=0}^{n-1} f(x)(2 * (n - x) - 3) + f(n-1)$。先傳一次確認是對的，然後這個顯然可以優化到$O(n)$，但我在想怎麼用這個算式做轉移矩陣，因為之前寫題的時候也有遇到類似的梗，但一時寫不出來。\n2:38 pG AC 接下來我去看pH，稍微證明幾個東西之後就發現前兩個subtask其實很可做，而且整題突然就做完了w。我覺得這題可能是前面名次的關鍵，因為這個包裝不一定每個人都能拆出來。\n3:09 pH AC 這個時候有530+(精神34)分心情就稍微穩定了一些。持續推I的矩陣還是沒想法，就跑去看了EF。EF的題目敘述都很複雜，所以我一時之間沒有搞清楚他要做甚麼。pE推了一下之後發現可以維護由下往上第$i$層樓在各時間抵達的金幣數，但好像需要用treap 維護，在這個時間寫已經有點晚了。後來我發現pF可以$2^n$暴力算，然後也可以拆半枚舉。雖然時間有點大但還是先寫完再說好了。\n4:09 pF TLE (49%) 果然被卡了，多加了幾種優化都過不去，但值域小的其實有過欸，是不是locality 爛掉，後來改成對個數lower_bound才過。 4:38 pF AC\n加上之前pI 的64分，現在開始寫E也寫不完了。最後683分的話好像不差，所以我就只拿了pE 19分。比賽在我試著刻寫不完的pC暴力之下結束了。\n賽後 balbit他竟然會寫pC。他反而是很神奇的沒碰F。聽到他高我100多分我就猜只有二等了。後來yungyao跟我說他623的時候我也有點嚇到，難道這次大家分數都那麼高嗎?\n打開手機一看，我剛好拿到了一等三，第一名跟第二名整整高我一百分。雖然拿到一等是很高興，但這麼大的差距讓我心情很複雜。經過這麼久的努力，還是離最強的人差距那麼多啊。這次拿到一等可能是運氣好，但至少證明我在這種高壓力的比賽下有機會拿到第三名，這樣就足夠了。\n主要檢討的問題:\n剛開始狀況頗差，pD沒有好好冷靜下來找bug浪費了一些時間。 I沒有想到矩陣快速冪的做法。這題有兩種切入方式(對每列由左至右轉移/找遞迴式)，前者實作細節比較多，但是後者會推不出正解(上面那個遞迴式應該沒辦法矩陣快速冪?有錯的話跟我說w)。我因為後者的作法比較好拿部分分就先寫了，遇到問題之後也沒有退一步回來看前者作法，所以才沒有想到滿分解。 F沒有想到DP做法。雖然看到範圍就有一點點感覺，但是因為題目太複雜，一時之間沒有好好把轉移想好，發現可以拆半之後馬上做，後來壓常又花時間。 總之高中全國賽正式結束了，下一場正式的比賽就是TOI一模了，這幾天先好好休息(救一下學分qwq)然後繼續努力吧。\n","permalink":"http://8e7.github.io/cp/contests/nhspc2021/","title":"2021 資訊學科能力競賽決賽 心得文"},{"content":"Git 和 Github 教學 這篇文章是前瞻工作坊的「Git 初階」課程所使用的參考文件。\nOutline:\n安裝與設定 add 和 commit 指定 commit patch add 和 amend branch 和 merge rebase remote 和 GitHub stash patch 和 cherry-Pick bisect and blame 補充資訊 什麼是 Git，Github？ 想像你在做一個程式專案，而你可能想要試試看新增一個功能，但是這個功能可能會動到很多個檔案，如果修完出 bug 了，那要變回原本的版本就會非常麻煩\u0026hellip; 這種問題造就了 git 的誕生。\nGit 是一個版本控制系統，可以幫電腦裡的檔案和資料夾紀錄不同時間的狀態。有了 git，你就能一步步的進行專案的開發，並且即使犯錯也有反悔的方法。\nGithub 則是 Git 的遠端資料庫，當你把專案上傳到 Github 之後，就能在另外一台電腦上把他下載下來。Github 最強大的是他的協作功能 — 一個團隊可以使用 Github 同時開發大型的專案，並且將不同地方的修改使用 merge 的方式來合併，這就是為什麼 Git 和 Github 在軟體開發界無所不在。\nStep 1 - 安裝與設定 首先，先建立一個 Github 帳號！ 先去 https://github.com/ 申請一個帳號。\nLinux ","permalink":"http://8e7.github.io/cp/tutorials/git/","title":"Git 和 Github 教學"},{"content":"這篇文章主要是讓我自己參考的筆記，因為這是一個有點容易忘記的技巧qwq\n我也不知道要寫啥，就直接進入正題吧\nCDQ 分治與「在線」FFT 參考文章\n問題介紹 我們要想辦法求出一個序列 $a$ 的前 $n$ 項，用 $a_0, a_2, \\dots, a_{n-1}$ 表示。\n$a_i$ 的遞迴關係是：\n$a_i = \\sum_{j=0}^{i-1} b_j \\times c_{i-1-j}$，且 $b_i = f(a_i), c_i = g(a_i)$\n這樣子的問題不好直接解決，因為直接算的複雜度是 $O(n^2)$，而且也不容易使用卷積，因為需要先算好前面的項目才能推算後面的部份。這個時候就需要使用 CDQ 分治的一個變形。\n解決方法 以下假設 $n = 2^k, k \\in \\mathbb{N}$\n令 $A(x) = a_0 + a_1x + a_2x^2 + \\dots + a_{n-1}x^{n-1}$，並且用同樣的方式定義 $B(x), C(x)$。令 $A_{l, r}(x) = a_l + a_{l+1} x + \\dots + a_rx^{r-l}$，那麼 CDQ 分治的想法如下：\nsolve(l, r) 會計算出 $A_{l, r-1}$。步驟為：\n初始狀態：如果 $r = l+1$，代表 $A_l$ 算好了，因此要推算 $b_l, c_l$ 並且 return 令 $m = \\frac{l+r}{2}$，先呼叫 solve(l, m)。 計算左半對右半的影響，這邊需要計算的轉移有兩個部份：用到 $B_{l, m-1}$ 的和用到 $C_{l, m-1}$ 的，而根據這兩個部份有沒有重疊可以分成兩種 Case: 如果 $l = 0$，那麼 $B, C$ 一定會完全重疊，因此計算 $D(x) = xB_{l, m-1}(x)C_{l, m-1}(x)$，並且將 $a_i$ 加上 $D_{i}$，對於所有 $m \\leq i \u0026lt; r$ 如果 $l \u0026gt; 0$，那麼 $B_{l, m-1}$ 和 $C_{l, m-1}$ 所用到的部份沒有任何重疊。具體來說，計算 $D(x) = xB_{l, m-1}(x)C_{0, r-l-1}(x)$ 和 $E(x) = xB_{0, r-l-1}(x)C_{l, m-1}(x)$，並且將 $a_i$ 加上 $D_{i} + E_{i}$，對於所有 $m \\leq i \u0026lt; r$ 實做可能會像這樣（CF 1792 F2: Graph Coloring）\nNTT\u0026lt;maxn, 998244353, 3\u0026gt; ntt; void mult(vector\u0026lt;ll\u0026gt; \u0026amp;va, vector\u0026lt;ll\u0026gt; \u0026amp;vb, vector\u0026lt;ll\u0026gt; \u0026amp;h, int l, int m, int r) { ntt(va, va.size(), 0), ntt(vb, vb.size(), 0); for (int i = 0;i \u0026lt; va.size();i++) va[i] = va[i] * vb[i] % mod;\tntt(va, va.size(), 1); for (int i = m;i \u0026lt; r;i++) h[i] = (h[i] + va[i-l-1])%mod; } void solve(int l, int r, vector\u0026lt;ll\u0026gt; \u0026amp;f, vector\u0026lt;ll\u0026gt; \u0026amp;g, vector\u0026lt;ll\u0026gt; \u0026amp;h) { if (r - l == 1) { if (l \u0026lt; 2) return; h[l] = h[l] * fac[l]*2 % mod; f[l] = h[l] * finv[l]%mod* ((mod+1) / 2)%mod; g[l] = h[l] * finv[l+1] % mod; //debug(\u0026#34;found\u0026#34;, l, h[l], f[l], g[l]); return; } int m = (l + r) / 2; solve(l, m, f, g, h); //debug(\u0026#34;add\u0026#34;, l, m, r); if (l == 0) { vector\u0026lt;ll\u0026gt; va(f.begin(), f.begin()+m), vb(g.begin(), g.begin()+m); va.resize(r-l), vb.resize(r-l); mult(va, vb, h, l, m, r); } else { { vector\u0026lt;ll\u0026gt; va(f.begin(), f.begin()+r-l), vb(g.begin()+l, g.begin()+m); vb.resize(r-l); mult(va, vb, h, l, m, r); } { vector\u0026lt;ll\u0026gt; va(f.begin()+l, f.begin()+m), vb(g.begin(), g.begin()+r-l); va.resize(r-l); mult(va, vb, h, l, m, r); } } solve(m, r, f, g, h); } int main() { io; fac[0] = finv[0] = 1; for (int i = 1;i \u0026lt; maxn;i++) { fac[i] = fac[i-1] * i % mod; } finv[maxn-1] = modpow(fac[maxn-1], mod-2); for (int i = maxn-2;i \u0026gt;= 0;i--) finv[i] = finv[i+1] * (i+1)%mod; int n; cin \u0026gt;\u0026gt; n; vector\u0026lt;ll\u0026gt; f(maxn), g(maxn), h(maxn); f[0] = 1, f[1] = 1; g[0] = 1, g[1] = 1; h[0] = 1, h[1] = 2; solve(0, maxn, f, g, h); cout \u0026lt;\u0026lt; (h[n-1]+mod-2)%mod \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } 轉換多項式的資訊 我不知道這個技巧是不是很常見，但是我看到這個酷題就決定把他記起來了XD\n問題內容：AGC 063 E\n這題的初步想法很標準：將每個節點的數值作為狀態做樹 DP。因為項數很多而且轉移看起來很卷積，我們可以用一個生函 $f_v(x) = dp_{v, 0} + dp_{v, 1}x + dp_{v, 2}x^2 + \\dots$ 表示這個節點的 DP 值，而我們就能得到以下轉移\n$p(x) = f(x^r)x^{A_v}, f\u0026rsquo;_v(x) = p(1) - \\frac{p(1) - p(x)}{1-x}$，其中 $F$ 是一個將 $f$ 轉換的方式，具體的方法看題目。\n$f_v(x) = \\Pi_{v \\rightarrow c} f\u0026rsquo;_c(x)$，這是將子節點做卷積的部份。\n最後要求的答案是 $f\u0026rsquo;_{root}(1)$，也就是那個多項式的所有係數和。\n這題精妙的地方就是在這個轉換：考慮 $g(x) = f(x+1)$，那麼我們最後要計算的是 $g\u0026rsquo;_{root}{0}$，只需要知道一項就好！\n仔細觀察轉移之後會發現，除以 $1-x$ 的部份會直接變成除以 $-x$，不只省去了實做麻煩的除法，還發現次方大於 $n$ 的東西一定不會影響到最後的常數項！所以這個問題瞬間就變的可做了。\n(以下待補\u0026hellip;)\n","permalink":"http://8e7.github.io/cp/algorithms/ffttricks/","title":"卷積的各種技巧"}]